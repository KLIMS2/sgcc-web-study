digraph ProjectArchitecture {
    comment="SGCC Web Study SvelteKit Project Architecture"
    // rankdir=LR  // 이 부분을 주석 처리하거나 삭제하여 수직 방향 레이아웃을 유도
    labelloc=t
    label="SGCC Web Study - SvelteKit Project Architecture Overview (Compacted)"
    fontsize=20
    nodesep="0.8" // 노드 간 간격 조정
    ranksep="1.2" // 랭크 간 간격 조정

    subgraph cluster_build_tools {
        label="Build & Development Tools"
        style=filled
        color=lightgrey
        node [style=filled color=white]
        Vite
        SvelteKit [label="SvelteKit Framework"]
        NodeJS [label="Node.js (Runtime Environment)"]
    }

    subgraph cluster_client {
        label="Client-Side (Browser - SvelteKit Frontend)"
        style=filled
        color=lightblue
        node [style=filled color=white]
        
        User [shape=actor]
        AppHTML [label="src/app.html\n(HTML Template)"]
        
        subgraph cluster_pages {
            label="Pages (src/routes)"
            style=filled
            color=lightyellow
            Layout [label="+layout.svelte (Common Layout)"]
            HomePage [label="+page.svelte (Home)"]
            StatsPage [label="stats/+page.svelte (Stats)"]
            AboutPage [label="about/+page.svelte (About)"]
        }
        
        AppCSS [label="src/app.css\n(Global Styles)"]

        subgraph cluster_components {
            label="UI Components (src/lib/components)"
            style=filled
            color=lightcyan
            Header [label="Header.svelte"]
            TodoForm [label="TodoForm.svelte"]
            TodoItem [label="TodoItem.svelte"]
            FilterBar [label="FilterBar.svelte"]
        }

        Stores [label="src/lib/stores.js\n(Svelte Stores:\ntodos, filter, theme, stats)"]
        ClientAPI [label="src/lib/api.js\n(Client-Side API Calls)"]
    }

    subgraph cluster_server {
        label="Server-Side (SvelteKit Backend)"
        style=filled
        color=lightgreen
        node [style=filled color=white]

        subgraph cluster_api_routes {
            label="API Routes (src/routes/api/todos)"
            style=filled
            color=palegreen
            TodosAPI [label="+server.js\n(GET /api/todos, POST /api/todos)"]
            TodoDetailAPI [label="[id]/+server.js\n(PATCH /api/todos/{id}, DELETE /api/todos/{id})"]
        }
        InMemoryData [label="In-Memory Data Store\n(JS Array in +server.js files)"]
    }

    // 관계 정의 (배치를 고려하여 순서 및 그룹화 조정)
    // User Interaction
    User -> AppHTML [label="Interacts via Browser"]

    // Build Tools and Runtime
    SvelteKit -> Vite [label=Uses]
    Vite -> NodeJS [label="Runs on"]
    SvelteKit -> NodeJS [label="Runs on"]
    
    // Client App Structure
    AppHTML -> Layout
    AppHTML -> AppCSS [label=Links]
    Layout -> HomePage
    Layout -> StatsPage
    Layout -> AboutPage

    // Page Content and Components
    HomePage -> Header
    HomePage -> TodoForm
    HomePage -> TodoItem
    HomePage -> FilterBar
    
    // State Management (Stores)
    HomePage -> Stores [label="Uses/Updates"]
    TodoForm -> Stores [label="Updates"]
    TodoItem -> Stores [label="Updates"]
    FilterBar -> Stores [label="Updates"]
    StatsPage -> Stores [label="Reads Stats"]
    
    // Client-Server Communication
    Stores -> ClientAPI [label="Triggers API calls\nbased on actions", MinedgeLen=2] // MinedgeLen으로 최소 간격 확보
    ClientAPI -> TodosAPI [label="fetchTodos(), createTodo()"]
    ClientAPI -> TodoDetailAPI [label="updateTodo(), deleteTodo()"]
    
    // API to Data
    TodosAPI -> InMemoryData [label="Reads/Writes"]
    TodoDetailAPI -> InMemoryData [label="Reads/Writes/Deletes"]

    // Explicitly connect ClientAPI to SvelteKit Backend group for clarity in vertical layout
    ClientAPI -> SvelteKit [label="HTTP Requests\nto API Routes", style=dashed, color=blue, constraint=false] // constraint=false로 레이아웃 유연성
    
    // Grouping build tools at the top
    {rank=source; Vite; SvelteKit; NodeJS}
    // Grouping User at a higher level than client details
    {rank=source; User}
    
    // Attempt to keep client and server somewhat aligned vertically if possible
    // This is more of a hint to the layout engine
    AppHTML -> TodosAPI [style=invis] // Invisible edge to influence ranking

}